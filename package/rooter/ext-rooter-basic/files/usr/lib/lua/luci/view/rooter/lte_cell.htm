<%+header%>

<style>
	table, th, td {
	  border-collapse: collapse;
	  text-align: center;
	}

	.high-light {
		color: red !important;
	}

	table {
	  width: 100%;
	}

	.loader {
		position: absolute;
		left: 50%;
		top: 50%;
		transform: translate(-50%,-50%);
		width: 100px;
		height: 100px;
		border-radius: 50%;
		position: relative;
		animation: rotate 1s linear infinite
	}

	.loader::before {
		content: "";
		box-sizing: border-box;
		position: absolute;
		inset: 0px;
		border-radius: 50%;
		border: 5px solid rgb(184, 7, 116);
		animation: prixClipFix 2s linear infinite ;
	}

	@keyframes rotate {
		100%   {transform: rotate(360deg)}
	}

	@keyframes prixClipFix {
		0%   {clip-path:polygon(50% 50%,0 0,0 0,0 0,0 0,0 0)}
		25%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 0,100% 0,100% 0)}
		50%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,100% 100%,100% 100%)}
		75%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 100%)}
		100% {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 0)}
	}
	#loading{
		position:relative;
		width: 100%;
		height: 5rem;
		left: 0;
		top: 0;
		z-index: 999;
		background-color: transparent;
	}
	fieldset#cbi-mod{
		position: relative;
	}
</style>

<script type="text/javascript" src="<%=resource%>/xhr.js"></script>
<script type="text/javascript" src="<%=resource%>/ui.js"></script>
<script type="text/javascript">//<![CDATA[
	
	window.addEventListener('load', function () {
		console.log("Load done");
		document.getElementById("loading").style.display="block";
		startScan();
	})

	function showScanningDiag()
	{
		L.require('ui').then(function(ui) {
			ui.showModal(_('Checking lockcellâ€¦'), [
				E('span', { 'class': 'spinning' }, _('Scanning....'))
			]);
		});
	}

	function closeDiag()
	{
		L.require('ui').then(function(ui) {
			ui.hideModal();
		});
	}

	function startScan()
	{
		console.log("Start Scan");
		isScanning = true;
		// Start scanning
		XHR.get('<%=luci.dispatcher.build_url("admin", "modem", "lte_scancell")%>',
			null,
			function(x, rv)
			{
				const data = rv.log;
				const dataArr = data.split('\n');
				const lockDataArr = rv.lock.split(' ');
				const tableHeader = `<tr>
						<th>TYPE </th>
						<th>OPERATOR </th>
						<th>COUNTRY </th>
						<th>PROTOCOL </th>
						<th>SCHEME </th>
						<th>MCC </th>
						<th>MNC </th>
						<th>CID </th>
						<th>PCID </th>
						<th>EARFCN </th>
						<th>FREQ BAND IND </th>
						<th>UL BW </th>
						<th>DL BW </th>
						<th>TAC </th>
						<th>RSRP </th>
						<th>RSRQ </th>
						<th>RSSI </th>
						<th>SINR </th>
						<th>SRXLEV </th>
						<th>CELL RSP </th>
						<th>SNIS </th>
						<th>SIS </th>
						<th>TXL </th>
						<th>TXH </th>
						<th></th>
					</tr>`;
				
				let connectedPCID;
				const lockedEARFCN=lockDataArr[0];
				const lockedPCID=lockDataArr[1];
				
				const tableBody = dataArr
				.filter(tr=>tr)
				.map((tr,index) => {
					const onlineArr = tr.split(' ');

					if (index == 0){
						wcdmaRescan = false;
						connectedPCID = onlineArr[8];
						if (onlineArr[3] != "LTE") wcdmaRescan = true;
						console.log(connectedPCID);
					}
					
					let isHighLight  = (index > 0) && (onlineArr[8] == connectedPCID);
					let isLockedCell = (parseInt(lockedPCID) != 0) && (connectedPCID == lockedPCID) && (onlineArr[8] == lockedPCID);
					
					let onlineStr = onlineArr.map((td, index) => `<td type=${NameOfColumn(index)} class=${isHighLight ? "high-light" : ""}>` + 
														`${td}` + 
														`</td>`).join('\t');
														
					if(index > 0)
					{
						onlineStr = onlineStr + `<td><button ${isLockedCell ? "disabled" : " "}  id='lckBT-${index}'` +
                                                `class="cbi-button cbi-button-apply" style="padding: 0.1rem 0.3rem"` + 
                                                `onclick='lockCell(${index},this,false)' >` + 
                                                `${isLockedCell ? "Locked" : "Lock cell"}` + `</button></td>`;
					}
					return `<tr id='tr-${index}' >${onlineStr}</tr>`
				})
				.join('\n');
				
				// Update table data
				document.querySelector("#table-data thead").innerHTML = tableHeader;
				document.querySelector("#table-data tbody").innerHTML = tableBody;
				
				// set timeout
				closeDiag();
				document.getElementById("loading").style.display="none";
				document.getElementById("download_csv").style.display = "inline-block";
				document.getElementById("trigger_scan").style.display = "inline-block";
				document.getElementById("scanCFG").style.visibility="visible";
				document.getElementById("connect_criteria").style.visibility="visible";
				document.getElementById("scan_cfg_bt").style.display = "inline-block";
				document.getElementById("auto_connect_bt").style.display = "inline-block";
				setTimeout(GenCSV,500);
				// Scan done
				if(wcdmaRescan) WcdmaRescan();
				isScanning = false;
				console.log("Stop Scan");	
			}
		);
		return false;
	}

	function WcdmaRescan()
	{
		if(document.getElementById("trigger_scan").value == "OFF")
		{
			// Temporary stop user request automatic scan
			// Actually not stop, just restart the timer 
			// Can do this trick since the timeout of user request is too long
			// it enough for this reScan finish
			query_apply_ScanCfg(false);
		}
		// force rescan after 30s
		setTimeout(startScan, 30000);
	}

	function NameOfColumn(index)
	{
		switch (index)
		{
			case 14:
				return "RSRP";
			case 15:
				return "RSRQ";
			default:
				return "default";
		}
	}

	function startScanOption(btn) {
		const btnValue = btn.value;
		if(btnValue == "ON")
		{
			console.log("Start automatic scan");
			query_apply_ScanCfg(false);
			periodicScanID = setInterval(startScan, cfgTimeMilSec);
			btn.value = '<%:OFF%>';
		}
		else
		{
			console.log("Stop automatic scan");
			clearInterval(periodicScanID);
			btn.value = '<%:ON%>';
		}
	}
	
	function query_apply_ScanCfg(showAlert){
		// calculate configure time
		cfgTimeMin=document.getElementById("scanCFG").value;
		if(cfgTimeMin == 0)
		{
			cfgTimeMin = 5; // set default periodic scan is 5 minutes
		}

		cfgTimeMilSec = cfgTimeMin * 60 * 1000; // convert from minute to mili-second 
		console.log(cfgTimeMilSec);

		// update cfgTime runtime
		// check if scanning - update configure time and restart
		if(document.getElementById("trigger_scan").value == "OFF")
		{
			clearInterval(periodicScanID);
			periodicScanID = setInterval(startScan, cfgTimeMilSec);
		}

		// show alert to use if needed
		if(showAlert == true)
		{
			alert("Change periodic scan time to:  " + cfgTimeMin + " minutes succeed");
		}
	}

	function retry_auto_connect()
	{
		// first - stop the auto connect retry timer
		clearInterval(retryAutoConnectID);

		// perform auto-connect
		let autoBtn = document.getElementById("auto_connect_bt");
		auto_connect(autoBtn);
	}

	function auto_connect(btn){
		// Change button state while perform auto connection
		btn.disabled  = true;
		
		// Wait while scan function performing
		if(isScanning)
		{
			btn.value = '<%:Wait for Scanning...%>';
			retryAutoConnectID = setInterval(retry_auto_connect,30000);	
			return false;
		}
		btn.value = '<%:CONNECTING...%>';

		// Filter the best cell
		const criteria = document.getElementById("connect_criteria").value;
		var columnData = document.querySelectorAll(`[type=${criteria}]`);
		var criteriaArrVal = [];
		for (var i = 1; i < columnData.length; i++) 
		{
			if(columnData[i].innerHTML != '-')
			{
				criteriaArrVal.push(parseInt(columnData[i].innerHTML));
			}
		}
		console.log(criteriaArrVal);
		const max = Math.max(...criteriaArrVal);
		let index = criteriaArrVal.indexOf(max);
		console.log(`"maxValue:" ${max} "index:" ${index}`); 

		// Perform lock
		let lockBT = document.getElementById(`lckBT-${index+1}`);
		lockCell(index+1,lockBT,true);
		
		// return true to notify if the lock finish or not
		return true;
	}

	function lockCell(index,btn,isAutoMode) {
		// Change button state while locking
		btn.disabled  = true;
		btn.innerHTML = '<%:LOCKING...%>';

		// Parse PCID & EARFCN
		const id = `tr-${index}`;
		const tr = document.getElementById(id);
		const rowData = tr.querySelectorAll("td");
		const PCID = rowData[8].innerHTML.replace(/\s/g, '');
		const EARFCN = rowData[9].innerHTML.replace(/\s/g, '');
		console.log(PCID, EARFCN)

		// Request lock cell to back-end
		XHR.get('<%=luci.dispatcher.build_url("admin", "modem", "lte_lockcell")%>',
			{ PCID:PCID , EARFCN:EARFCN},
			function(x, rv)
			{
				// re-init button
				btn.innerHTML = '<%:Locked%>';

				// show loading animation and re-scan 
				// alert("Lock to the cell with PCID: " + PCID + "done\nRe-Scan to see the effect!");
				// $("#table-data tbody tr").remove();
				// document.getElementById("loading").style.display = "block";
				showScanningDiag();
				isScanning = true;
				setTimeout(startScan, 60000);

				// re-init auto connect button
				if(isAutoMode==true)
				{
					document.getElementById("auto_connect_bt").disabled = false;
					document.getElementById("auto_connect_bt").value = '<%:AUTO CONNECT%>';
				}
			}
		);
		return false;
	}

	function GenCSV() {
		var data = [];
		var rows = document.querySelectorAll("#table-data tr");
		for (var i = 0; i < rows.length; i++) {
			var row = [], cols = rows[i].querySelectorAll("td, th");
			for (var j = 0; j < cols.length-1 ; j++) {
					row.push(cols[j].innerText);
			}
					
			data.push(row.join(",")); 		
		}
		downloadCSVFile(data.join("\n"), "LogData.csv");
	}

	function downloadCSVFile(csv, filename) {
		var csv_file, download_link;

		csv_file = new Blob([csv], {type: "text/csv"});

		download_link = document.getElementById("download_csv");

		download_link.download = filename;

		download_link.href = window.URL.createObjectURL(csv_file);

		// download_link.style.display = "inline-block";
	}

//]]></script>
<div class="cbi-map" id="cbi-modem">
<h2><a id="content" name="content"><%:Modem Scan Cell Information%></a></h2>
<div class="cbi-map-descr"> </div>
<fieldset class="cbi-section" id="cbi-mod">
	<div align="left">
		<input id="trigger_scan" type="button" class="cbi-button cbi-button-apply" value="<%:ON%>" style="display:none" onclick="return startScanOption(this)" /> 
		<select style="visibility:hidden;width:auto" name="periodic_scan_time" id="scanCFG">
			<option value=0 selected="selected"><%:Default%></option>
			<option value=5><%:5 Mins%></option>
			<option value=10><%:10 Mins%></option>
			<option value=15><%:15 Mins%></option>
			<option value=20><%:20 Mins%></option>
			<option value=25><%:25 Mins%></option>
			<option value=30><%:30 Mins%></option>
			<option value=35><%:35 Mins%></option>
			<option value=40><%:40 Mins%></option>
			<option value=45><%:45 Mins%></option>
			<option value=50><%:50 Mins%></option>
			<option value=55><%:55 Mins%></option>
			<option value=60><%:60 Mins%></option>
		</select>
		<input id="scan_cfg_bt" type="button" class="cbi-button cbi-button-apply" value="<%:APPLY SCAN CONFIG%>" style="display:none" onclick="return query_apply_ScanCfg(true)" />
		<select style="visibility:hidden;width:auto" name="periodic_scan_time" id="connect_criteria">
			<option value="RSRP" selected="selected"><%:Default%></option>
			<option value="RSRP"><%:RSRP%></option>
		</select>
		<input id="auto_connect_bt" type="button" class="cbi-button cbi-button-apply" value="<%:AUTO CONNECT%>" style="display:none" onclick="return auto_connect(this)" />
		<a id="download_csv" class="cbi-button cbi-button-apply" style="display:none">Download CSV</a>
	</div>
	</table>
	<legend><%:Log Data%></legend>
	<table id="table-data">
		<thead></thead>
		<tbody></table>
	</table>
	<div id="loading" style="display: none;" align="center"><span class="spinning"><%:Scanningâ€¦%></span></div>
</fieldset>
<br></br>
</div>

<%+footer%>