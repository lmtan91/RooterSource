<%+header%>

<style>
	table, th, td {
	  border-collapse: collapse;
	  text-align: center;
	}

	.high-light {
		color: red !important;
	}

	table {
	  width: 100%;
	}
</style>

<script type="text/javascript" src="<%=resource%>/xhr.js"></script>
<script type="text/javascript">//<![CDATA[
		
	function startScan()
	{
		// Start scanning
		XHR.get('<%=luci.dispatcher.build_url("admin", "modem", "lte_scancell")%>',
			null,
			function(x, rv)
			{
				const data = rv.log;
				const dataArr = data.split('\n');
				const table = document.getElementById('table-data');
				const tableHeader = `<tr>
						<th>TYPE </th>
						<th>OPERATOR </th>
						<th>COUNTRY </th>
						<th>PROTOCOL </th>
						<th>SCHEME </th>
						<th>MCC </th>
						<th>MNC </th>
						<th>CID </th>
						<th>PCID </th>
						<th>EARFCN </th>
						<th>FREQ BAND IND </th>
						<th>UL BW </th>
						<th>DL BW </th>
						<th>TAC </th>
						<th>RSRP </th>
						<th>RSRQ </th>
						<th>RSSI </th>
						<th>SINR </th>
						<th>SRXLEV </th>
						<th>CELL RSP </th>
						<th>SNIS </th>
						<th>SIS </th>
						<th>TXL </th>
						<th>TXH </th>
						<th></th>
					</tr>`;
				
				let connectedPCID;

				const tableBody = dataArr
				.filter(tr=>tr)
				.map((tr,index) => {
					const onlineArr = tr.split(' ');

					if (index == 0){
						connectedPCID = onlineArr[8];
						console.log(connectedPCID);
					}

					let IsConnected = (onlineArr[8] == connectedPCID);

					let onlineStr = onlineArr.map(td => `<td class=${IsConnected && index > 0 ? "high-light" : ""}>` + 
														`${td}` + 
														`</td>`).join('\t');
														
					if(index > 0)
					{
						onlineStr = onlineStr + `<td><button class="cbi-button cbi-button-apply" style="padding: 0.1rem 0.3rem" onclick='lockCell(${index},this)' >Lock cell</button></td>`
					}
					return `<tr id='tr-${index}' >${onlineStr}</tr>`
				})
				.join('\n');
				table.innerHTML = tableHeader + tableBody;
				
				// set timeout
				setTimeout(GenCSV,500);
			}
		);
		return false;
	}

	function lockCell(index,btn) {
		// Change button state while locking
		btn.disabled  = true;
		btn.innerHTML = '<%:Locking...%>';

		// Parse PCID & EARFCN
		const id = `tr-${index}`;
		const tr = document.getElementById(id);
		const rowData = tr.querySelectorAll("td");
		const PCID = rowData[8].innerHTML.replace(/\s/g, '');
		const EARFCN = rowData[9].innerHTML.replace(/\s/g, '');
		console.log(PCID, EARFCN)

		// Request lock cell to back-end
		XHR.get('<%=luci.dispatcher.build_url("admin", "modem", "lte_lockcell")%>',
			{ PCID:PCID , EARFCN:EARFCN},
			function(x, rv)
			{
				// re-init button
				btn.innerHTML = '<%:Locked%>';
			}
		);
		return false;
	}

	function GenCSV() {
		var data = [];
		var rows = document.querySelectorAll("#table-data tr");
		for (var i = 0; i < rows.length; i++) {
			var row = [], cols = rows[i].querySelectorAll("td, th");
			for (var j = 0; j < cols.length-1 ; j++) {
					row.push(cols[j].innerText);
			}
					
			data.push(row.join(",")); 		
		}
		downloadCSVFile(data.join("\n"), "LogData.csv");
	}

	function downloadCSVFile(csv, filename) {
		var csv_file, download_link;

		csv_file = new Blob([csv], {type: "text/csv"});

		download_link = document.getElementById("download_csv");

		download_link.download = filename;

		download_link.href = window.URL.createObjectURL(csv_file);

		download_link.style.display = "inline-block";
	}

//]]></script>
<div class="cbi-map" id="cbi-modem">
<h2><a id="content" name="content"><%:Modem Scan Cell Information%></a></h2>
<div class="cbi-map-descr"> </div>
<fieldset class="cbi-section" id="cbi-mod">
	<div align="left"> 
		<a id="download_csv" class="cbi-button cbi-button-apply" style="display:none">Download CSV</a>
	</div>
	</table>
	<legend><%:Log Data%></legend>
	<table id="table-data"></table>
</fieldset>
<br></br>
</div>

<%+footer%>